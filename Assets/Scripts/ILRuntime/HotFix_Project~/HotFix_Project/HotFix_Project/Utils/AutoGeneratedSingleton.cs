// A Monolithic state keeper class
namespace HotFix_Project.Utils
{
    public class AutoGeneratedSingleton<T> : System.IDisposable where T : AutoGeneratedSingleton<T>, new()
    {
        private static T m_instance = null;
        private readonly static object _lock = new object();

        public static T Instance
        {
            get
            {
                lock (_lock)
                {
                    if (m_instance == null)
                    {
                        m_instance = new T();
                    }

                    return m_instance;
                }
            }
        }

        private bool m_isDispose = false;
        public void Dispose()
        {
            Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if(!m_isDispose)
            {
                if(disposing)
                {
                    // 释放托管资源
                    DisposeManagedResources();
                    m_instance = null;
                }
                // 释放非托管资源
                DisposeUnManagedResources();
                m_isDispose = true;
            }
        }

        /// <summary>
        /// 清理托管资源
        /// </summary>
        protected virtual void DisposeManagedResources()
        {

        }
        /// <summary>
        /// 清理非托管资源
        /// </summary>
        protected virtual void DisposeUnManagedResources()
        {

        }
    }
}