using System;
using System.Collections.Generic;
using UnityEngine;

namespace HotFix_Project
{
    public class ObjectPoolManager : AutoGeneratedSingleton<ObjectPoolManager>
    {
        private Dictionary<Type, ObjectPoolHandler<ObjectPool.ObjectPool>> m_poolObjects = new Dictionary<Type, ObjectPoolHandler<ObjectPool.ObjectPool>>();

        public void Initializtion()
        {
            m_poolObjects.Clear();
        }

        public void InitPool<T>(int maxCount) where T : ObjectPool.ObjectPool
        {
            if (!m_poolObjects.TryGetValue(typeof(T), out ObjectPoolHandler<ObjectPool.ObjectPool> handler) || handler == null)
            {
                handler = new ObjectPoolHandler<ObjectPool.ObjectPool>(maxCount);
                m_poolObjects[typeof(T)] = handler;
            }
            Debug.Log($"[ObjectPoolManager] InitPool {typeof(T).Name}");
        }

        public T GetPoolObject<T>() where T : ObjectPool.ObjectPool, new()
        {
            if (m_poolObjects.TryGetValue(typeof(T), out ObjectPoolHandler<ObjectPool.ObjectPool> handler) && handler != null)
            {
                Debug.Log($"[ObjectPoolManager] GetPoolObject 1 {typeof(T).Name}, {handler == null}");
                T obj = handler.GetPoolObject() as T;
                Debug.Log($"[ObjectPoolManager] GetPoolObject 2 {typeof(T).Name}, {obj == null}");
                if (obj == null) obj = new T();
                Debug.Log($"[ObjectPoolManager] GetPoolObject 3 {typeof(T).Name}, {obj == null}");
                return obj;
            }
            Debug.Log($"[ObjectPoolManager] GetPoolObject null.");
            return null;
        }

        public void RecycleObjectPool<T>(T obj) where T : ObjectPool.ObjectPool
        {
            obj.Reset();
            if (m_poolObjects.TryGetValue(typeof(T), out ObjectPoolHandler<ObjectPool.ObjectPool> handler))
            {
                if (handler == null)
                {
                    m_poolObjects.Remove(typeof(T));
                }
                else
                {
                    handler.RecyclePoolObject(obj);
                }
            }
            else
            {
                obj.Dispose();
            }
        }

        protected override void DisposeManagedResources()
        {
            // 释放托管资源
            foreach (var item in m_poolObjects)
            {
                if (item.Value != null)
                {
                    item.Value.Dispose();
                }
            }
            m_poolObjects.Clear();
            base.DisposeManagedResources();
        }

        protected override void DisposeUnManagedResources()
        {
            // 释放非托管资源
            base.DisposeUnManagedResources();
        }
    }
}
