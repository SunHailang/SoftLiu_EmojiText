using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.U2D;

namespace HotFix_Project
{
    public class GameController : Utils.AutoGeneratedSingleton<GameController>
    {
        private GameObject m_curController = null;

        private void BindingGo(GameObject go)
        {
            Debug.Log($"[BindingGo] : {go.name}");
            if(m_curController != null)
            {
                GameObject.DestroyImmediate(m_curController);
            }
            m_curController = go;
            GameObject.DontDestroyOnLoad(m_curController);
            // 1. 绑定 UiManager
            GameObject uiManager = go.transform.Find("UiManager").gameObject;
            UIManager.Instance.Initialization(uiManager);

            UIManager.Instance.OpenCanvasUI<UI.LoginCanvas>();
        }

        public void Initialization()
        {
            SpriteAtlasManager.atlasRequested += OnAtlasRequested;
            HotFixMonoBehaviour.Instance.DoCoroutine(LoadEntryScene());
        }

        private System.Collections.IEnumerator LoadEntryScene()
        {
            Debug.Log("LoadEntryScene : Start GameEntry");
            yield return SceneManager.LoadSceneAsync("GameEntry");
            Debug.Log("LoadEntryScene : End GameEntry");
            ResourceLoaderProxy.GetInstance().LoadUiAssetAsync("GameController", LoadAssetCallback);
        }

        private void LoadAssetCallback(bool success, GameObject obj)
        {
            if (success)
            {
                Debug.Log($"[LoadAssetCallback] : {success}");
                GameObject prefab = GameObject.Instantiate(obj);
                prefab.transform.SetParent(null);
                prefab.transform.localPosition = Vector3.zero;

                BindingGo(prefab);
            }
            else
            {
                // 资源加载失败
                Debug.LogError($"资源加载失败");
            }
        }

        public void Release()
        {
            this.Dispose();
        }

        public void OnAtlasRequested(string tag, System.Action<SpriteAtlas> callback)
        {
            Debug.Log($"[OnAtlasRequested] Tag: {tag}");
             ResourceLoaderProxy.GetInstance().LoadUiAssetAsync(tag, (success, sprite) =>
             {
                 if (success)
                 {
                     callback(sprite);
                 }
             });
        }

        protected override void DisposeManagedResources()
        {
            SpriteAtlasManager.atlasRequested -= OnAtlasRequested;
            base.DisposeManagedResources();
        }

    }
}
