using ILRuntime.CLR.TypeSystem;
using ILRuntime.CLR.Method;
using ILRuntime.Runtime.Enviorment;

public class MonoBehaviourManger : AutoGeneratedMonoSingleton<MonoBehaviourManger>
{
    // private IType InstantiateType = null;
    // private object InstantiateObj = null;

    private const string typeStr = "HotFix_Project.MonoBehaviourController";

    public void Init(){}
    
    private void Awake()
    {
        // 预先获得IMethod，可以减低每次调用查找方法耗用的时间
        // InstantiateType = HotFixMgr.Instance.AppDomain.LoadedTypes[typeStr];
        // 第二种方式
        // InstantiateObj = ((ILType) InstantiateType).Instantiate();

        CallMethod("Awake");
    }

    private void OnEnable()
    {
        CallMethod("OnEnable");
    }

    private void Start()
    {
        CallMethod("Start");
    }

    private void Update()
    {
        CallMethod("Update");
    }

    private void FixedUpdate()
    {
        CallMethod("FixedUpdate");
    }

    private void LateUpdate()
    {
        CallMethod("LateUpdate");
    }

    private void OnDisable()
    {
        CallMethod("OnDisable");
    }

    private void OnDestroy()
    {
        CallMethod("OnDestroy");


        // InstantiateType = null;
        // InstantiateObj = null;
    }

    private void CallMethod(string methodName)
    {
        // 根据方法名称和参数个数获取方法
        // IMethod method = InstantiateType.GetMethod(methodName, 0);
        // using (InvocationContext ctx = HotFixMgr.Instance.AppDomain.BeginInvoke(method))
        // {
        //     ctx.PushObject(InstantiateObj);
        //     ctx.Invoke();
        // }
        HotFixMgr.Instance.AppDomain.Invoke(typeStr, methodName, null, null);
    }
}