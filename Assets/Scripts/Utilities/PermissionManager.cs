public class PermissionManager : UnityAutoGeneratedSingleton<PermissionManager>
{
    /// <summary>
    /// 判断是否有 permission 的权限
    /// </summary>
    /// <param name="permission">权限名称</param>
    /// <param name="isHave">是否有权限 有：True， 其他: False</param>
    public void IsHavePermission(string permission, out bool isHave)
    {
#if UNITY_ANDROID && !UNITY_EDITOR
        isHave = UnityEngine.Android.Permission.HasUserAuthorizedPermission(permission);
#elif UNITY_IPHONE && !UNITY_EDITOR
        isHave = false;
#else
        isHave = true;
#endif
    }

    /// <summary>
    /// 判断是否有 permission 的权限，如果没有 就主动请求
    /// </summary>
    /// <param name="permission">权限名称</param>
    /// <param name="callbackGranted">授权回调</param>
    /// <param name="callbackDenied">拒接回调, 如果True表示不在询问</param>
    /// <param name="isHave">是否有权限 有：True， 其他: False</param>
    public void IsHavePermission(string permission, out bool isHave, System.Action<string> callbackGranted, System.Action<string, bool> callbackDenied)
    {
#if UNITY_ANDROID && !UNITY_EDITOR
        isHave = UnityEngine.Android.Permission.HasUserAuthorizedPermission(permission);
        if (!isHave)
        {
            UnityEngine.Android.PermissionCallbacks permissionCallbacks = new UnityEngine.Android.PermissionCallbacks();
            permissionCallbacks.PermissionGranted += callbackGranted;
            permissionCallbacks.PermissionDenied += (str) => callbackDenied(str, false);
            permissionCallbacks.PermissionDeniedAndDontAskAgain += (str) => callbackDenied(str, true);
            UnityEngine.Android.Permission.RequestUserPermission(permission, permissionCallbacks);
        }
#elif UNITY_IPHONE && !UNITY_EDITOR
        isHave = false;
#else
        isHave = true;
#endif
    }
}