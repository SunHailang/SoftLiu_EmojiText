// A Monolithic state keeper class

public class AutoGeneratedSingleton<T> : System.IDisposable where T : AutoGeneratedSingleton<T>, new()
{
    private static T m_instance = null;
    private static object _lock = new object();

    public static T Instance
    {
        get
        {
            lock (_lock)
            {
                if (m_instance == null)
                {
                    m_instance = new T();
                }

                return m_instance;
            }
        }
    }

    protected bool IsDispose = false;
    
    public void Dispose()
    {
        Dispose(true);
        System.GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!IsDispose)
        {
            if (disposing)
            {
                // 释放托管资源
                m_instance = null;
            }
            // 释放非托管资源

            IsDispose = true;
        }
    }
}